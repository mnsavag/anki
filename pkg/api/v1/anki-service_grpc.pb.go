// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: v1/anki-service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnkiServiceV1_CreateDeck_FullMethodName  = "/anki.v1.AnkiServiceV1/CreateDeck"
	AnkiServiceV1_UpdateDeck_FullMethodName  = "/anki.v1.AnkiServiceV1/UpdateDeck"
	AnkiServiceV1_DeleteDeck_FullMethodName  = "/anki.v1.AnkiServiceV1/DeleteDeck"
	AnkiServiceV1_GetDeckById_FullMethodName = "/anki.v1.AnkiServiceV1/GetDeckById"
	AnkiServiceV1_CreateCard_FullMethodName  = "/anki.v1.AnkiServiceV1/CreateCard"
	AnkiServiceV1_UpdateCard_FullMethodName  = "/anki.v1.AnkiServiceV1/UpdateCard"
	AnkiServiceV1_DeleteCard_FullMethodName  = "/anki.v1.AnkiServiceV1/DeleteCard"
)

// AnkiServiceV1Client is the client API for AnkiServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnkiServiceV1Client interface {
	// Deck
	CreateDeck(ctx context.Context, in *CreateDeckRequest, opts ...grpc.CallOption) (*CreateDeckResponse, error)
	UpdateDeck(ctx context.Context, in *UpdateDeckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteDeck(ctx context.Context, in *DeleteDeckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDeckById(ctx context.Context, in *GetDeckByIdRequest, opts ...grpc.CallOption) (*GetDeckByIdResponse, error)
	// Card
	CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CreateCardResponse, error)
	UpdateCard(ctx context.Context, in *UpdateCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type ankiServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewAnkiServiceV1Client(cc grpc.ClientConnInterface) AnkiServiceV1Client {
	return &ankiServiceV1Client{cc}
}

func (c *ankiServiceV1Client) CreateDeck(ctx context.Context, in *CreateDeckRequest, opts ...grpc.CallOption) (*CreateDeckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDeckResponse)
	err := c.cc.Invoke(ctx, AnkiServiceV1_CreateDeck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ankiServiceV1Client) UpdateDeck(ctx context.Context, in *UpdateDeckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AnkiServiceV1_UpdateDeck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ankiServiceV1Client) DeleteDeck(ctx context.Context, in *DeleteDeckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AnkiServiceV1_DeleteDeck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ankiServiceV1Client) GetDeckById(ctx context.Context, in *GetDeckByIdRequest, opts ...grpc.CallOption) (*GetDeckByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeckByIdResponse)
	err := c.cc.Invoke(ctx, AnkiServiceV1_GetDeckById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ankiServiceV1Client) CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CreateCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCardResponse)
	err := c.cc.Invoke(ctx, AnkiServiceV1_CreateCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ankiServiceV1Client) UpdateCard(ctx context.Context, in *UpdateCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AnkiServiceV1_UpdateCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ankiServiceV1Client) DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AnkiServiceV1_DeleteCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnkiServiceV1Server is the server API for AnkiServiceV1 service.
// All implementations must embed UnimplementedAnkiServiceV1Server
// for forward compatibility.
type AnkiServiceV1Server interface {
	// Deck
	CreateDeck(context.Context, *CreateDeckRequest) (*CreateDeckResponse, error)
	UpdateDeck(context.Context, *UpdateDeckRequest) (*emptypb.Empty, error)
	DeleteDeck(context.Context, *DeleteDeckRequest) (*emptypb.Empty, error)
	GetDeckById(context.Context, *GetDeckByIdRequest) (*GetDeckByIdResponse, error)
	// Card
	CreateCard(context.Context, *CreateCardRequest) (*CreateCardResponse, error)
	UpdateCard(context.Context, *UpdateCardRequest) (*emptypb.Empty, error)
	DeleteCard(context.Context, *DeleteCardRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAnkiServiceV1Server()
}

// UnimplementedAnkiServiceV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnkiServiceV1Server struct{}

func (UnimplementedAnkiServiceV1Server) CreateDeck(context.Context, *CreateDeckRequest) (*CreateDeckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeck not implemented")
}
func (UnimplementedAnkiServiceV1Server) UpdateDeck(context.Context, *UpdateDeckRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeck not implemented")
}
func (UnimplementedAnkiServiceV1Server) DeleteDeck(context.Context, *DeleteDeckRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeck not implemented")
}
func (UnimplementedAnkiServiceV1Server) GetDeckById(context.Context, *GetDeckByIdRequest) (*GetDeckByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeckById not implemented")
}
func (UnimplementedAnkiServiceV1Server) CreateCard(context.Context, *CreateCardRequest) (*CreateCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (UnimplementedAnkiServiceV1Server) UpdateCard(context.Context, *UpdateCardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCard not implemented")
}
func (UnimplementedAnkiServiceV1Server) DeleteCard(context.Context, *DeleteCardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (UnimplementedAnkiServiceV1Server) mustEmbedUnimplementedAnkiServiceV1Server() {}
func (UnimplementedAnkiServiceV1Server) testEmbeddedByValue()                       {}

// UnsafeAnkiServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnkiServiceV1Server will
// result in compilation errors.
type UnsafeAnkiServiceV1Server interface {
	mustEmbedUnimplementedAnkiServiceV1Server()
}

func RegisterAnkiServiceV1Server(s grpc.ServiceRegistrar, srv AnkiServiceV1Server) {
	// If the following call pancis, it indicates UnimplementedAnkiServiceV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnkiServiceV1_ServiceDesc, srv)
}

func _AnkiServiceV1_CreateDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnkiServiceV1Server).CreateDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnkiServiceV1_CreateDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnkiServiceV1Server).CreateDeck(ctx, req.(*CreateDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnkiServiceV1_UpdateDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnkiServiceV1Server).UpdateDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnkiServiceV1_UpdateDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnkiServiceV1Server).UpdateDeck(ctx, req.(*UpdateDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnkiServiceV1_DeleteDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnkiServiceV1Server).DeleteDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnkiServiceV1_DeleteDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnkiServiceV1Server).DeleteDeck(ctx, req.(*DeleteDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnkiServiceV1_GetDeckById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeckByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnkiServiceV1Server).GetDeckById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnkiServiceV1_GetDeckById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnkiServiceV1Server).GetDeckById(ctx, req.(*GetDeckByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnkiServiceV1_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnkiServiceV1Server).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnkiServiceV1_CreateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnkiServiceV1Server).CreateCard(ctx, req.(*CreateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnkiServiceV1_UpdateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnkiServiceV1Server).UpdateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnkiServiceV1_UpdateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnkiServiceV1Server).UpdateCard(ctx, req.(*UpdateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnkiServiceV1_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnkiServiceV1Server).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnkiServiceV1_DeleteCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnkiServiceV1Server).DeleteCard(ctx, req.(*DeleteCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnkiServiceV1_ServiceDesc is the grpc.ServiceDesc for AnkiServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnkiServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anki.v1.AnkiServiceV1",
	HandlerType: (*AnkiServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeck",
			Handler:    _AnkiServiceV1_CreateDeck_Handler,
		},
		{
			MethodName: "UpdateDeck",
			Handler:    _AnkiServiceV1_UpdateDeck_Handler,
		},
		{
			MethodName: "DeleteDeck",
			Handler:    _AnkiServiceV1_DeleteDeck_Handler,
		},
		{
			MethodName: "GetDeckById",
			Handler:    _AnkiServiceV1_GetDeckById_Handler,
		},
		{
			MethodName: "CreateCard",
			Handler:    _AnkiServiceV1_CreateCard_Handler,
		},
		{
			MethodName: "UpdateCard",
			Handler:    _AnkiServiceV1_UpdateCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _AnkiServiceV1_DeleteCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/anki-service.proto",
}
