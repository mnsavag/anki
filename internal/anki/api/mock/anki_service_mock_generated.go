// Code generated by MockGen. DO NOT EDIT.
// Source: anki_service.go
//
// Generated by this command:
//
//	mockgen -destination=./mock/anki_service_mock_generated.go -package=mock -source anki_service.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/mnsavag/anki.git/internal/anki/model"
	dto "github.com/mnsavag/anki.git/internal/anki/service/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockAnkiService is a mock of AnkiService interface.
type MockAnkiService struct {
	ctrl     *gomock.Controller
	recorder *MockAnkiServiceMockRecorder
	isgomock struct{}
}

// MockAnkiServiceMockRecorder is the mock recorder for MockAnkiService.
type MockAnkiServiceMockRecorder struct {
	mock *MockAnkiService
}

// NewMockAnkiService creates a new mock instance.
func NewMockAnkiService(ctrl *gomock.Controller) *MockAnkiService {
	mock := &MockAnkiService{ctrl: ctrl}
	mock.recorder = &MockAnkiServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnkiService) EXPECT() *MockAnkiServiceMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockAnkiService) CreateCard(ctx context.Context, deckId uuid.UUID, card dto.CreateCardData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", ctx, deckId, card)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockAnkiServiceMockRecorder) CreateCard(ctx, deckId, card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockAnkiService)(nil).CreateCard), ctx, deckId, card)
}

// CreateDeck mocks base method.
func (m *MockAnkiService) CreateDeck(ctx context.Context, createData dto.CreateDeckData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeck", ctx, createData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeck indicates an expected call of CreateDeck.
func (mr *MockAnkiServiceMockRecorder) CreateDeck(ctx, createData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeck", reflect.TypeOf((*MockAnkiService)(nil).CreateDeck), ctx, createData)
}

// DeleteCard mocks base method.
func (m *MockAnkiService) DeleteCard(ctx context.Context, cardId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", ctx, cardId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockAnkiServiceMockRecorder) DeleteCard(ctx, cardId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockAnkiService)(nil).DeleteCard), ctx, cardId)
}

// DeleteDeck mocks base method.
func (m *MockAnkiService) DeleteDeck(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeck", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeck indicates an expected call of DeleteDeck.
func (mr *MockAnkiServiceMockRecorder) DeleteDeck(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeck", reflect.TypeOf((*MockAnkiService)(nil).DeleteDeck), ctx, id)
}

// GetDeckById mocks base method.
func (m *MockAnkiService) GetDeckById(ctx context.Context, id uuid.UUID) (model.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeckById", ctx, id)
	ret0, _ := ret[0].(model.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeckById indicates an expected call of GetDeckById.
func (mr *MockAnkiServiceMockRecorder) GetDeckById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeckById", reflect.TypeOf((*MockAnkiService)(nil).GetDeckById), ctx, id)
}

// UpdateCard mocks base method.
func (m *MockAnkiService) UpdateCard(ctx context.Context, cardId uuid.UUID, card dto.UpdateCardData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", ctx, cardId, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockAnkiServiceMockRecorder) UpdateCard(ctx, cardId, card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockAnkiService)(nil).UpdateCard), ctx, cardId, card)
}

// UpdateDeck mocks base method.
func (m *MockAnkiService) UpdateDeck(ctx context.Context, id uuid.UUID, deck dto.UpdateDeckData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeck", ctx, id, deck)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeck indicates an expected call of UpdateDeck.
func (mr *MockAnkiServiceMockRecorder) UpdateDeck(ctx, id, deck any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeck", reflect.TypeOf((*MockAnkiService)(nil).UpdateDeck), ctx, id, deck)
}

// MockCardExecutor is a mock of CardExecutor interface.
type MockCardExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockCardExecutorMockRecorder
	isgomock struct{}
}

// MockCardExecutorMockRecorder is the mock recorder for MockCardExecutor.
type MockCardExecutorMockRecorder struct {
	mock *MockCardExecutor
}

// NewMockCardExecutor creates a new mock instance.
func NewMockCardExecutor(ctrl *gomock.Controller) *MockCardExecutor {
	mock := &MockCardExecutor{ctrl: ctrl}
	mock.recorder = &MockCardExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardExecutor) EXPECT() *MockCardExecutorMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockCardExecutor) CreateCard(ctx context.Context, deckId uuid.UUID, card dto.CreateCardData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", ctx, deckId, card)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockCardExecutorMockRecorder) CreateCard(ctx, deckId, card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockCardExecutor)(nil).CreateCard), ctx, deckId, card)
}

// DeleteCard mocks base method.
func (m *MockCardExecutor) DeleteCard(ctx context.Context, cardId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", ctx, cardId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockCardExecutorMockRecorder) DeleteCard(ctx, cardId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockCardExecutor)(nil).DeleteCard), ctx, cardId)
}

// UpdateCard mocks base method.
func (m *MockCardExecutor) UpdateCard(ctx context.Context, cardId uuid.UUID, card dto.UpdateCardData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", ctx, cardId, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockCardExecutorMockRecorder) UpdateCard(ctx, cardId, card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockCardExecutor)(nil).UpdateCard), ctx, cardId, card)
}

// MockDeckExecutor is a mock of DeckExecutor interface.
type MockDeckExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockDeckExecutorMockRecorder
	isgomock struct{}
}

// MockDeckExecutorMockRecorder is the mock recorder for MockDeckExecutor.
type MockDeckExecutorMockRecorder struct {
	mock *MockDeckExecutor
}

// NewMockDeckExecutor creates a new mock instance.
func NewMockDeckExecutor(ctrl *gomock.Controller) *MockDeckExecutor {
	mock := &MockDeckExecutor{ctrl: ctrl}
	mock.recorder = &MockDeckExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeckExecutor) EXPECT() *MockDeckExecutorMockRecorder {
	return m.recorder
}

// CreateDeck mocks base method.
func (m *MockDeckExecutor) CreateDeck(ctx context.Context, createData dto.CreateDeckData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeck", ctx, createData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeck indicates an expected call of CreateDeck.
func (mr *MockDeckExecutorMockRecorder) CreateDeck(ctx, createData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeck", reflect.TypeOf((*MockDeckExecutor)(nil).CreateDeck), ctx, createData)
}

// DeleteDeck mocks base method.
func (m *MockDeckExecutor) DeleteDeck(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeck", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeck indicates an expected call of DeleteDeck.
func (mr *MockDeckExecutorMockRecorder) DeleteDeck(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeck", reflect.TypeOf((*MockDeckExecutor)(nil).DeleteDeck), ctx, id)
}

// GetDeckById mocks base method.
func (m *MockDeckExecutor) GetDeckById(ctx context.Context, id uuid.UUID) (model.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeckById", ctx, id)
	ret0, _ := ret[0].(model.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeckById indicates an expected call of GetDeckById.
func (mr *MockDeckExecutorMockRecorder) GetDeckById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeckById", reflect.TypeOf((*MockDeckExecutor)(nil).GetDeckById), ctx, id)
}

// UpdateDeck mocks base method.
func (m *MockDeckExecutor) UpdateDeck(ctx context.Context, id uuid.UUID, deck dto.UpdateDeckData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeck", ctx, id, deck)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeck indicates an expected call of UpdateDeck.
func (mr *MockDeckExecutorMockRecorder) UpdateDeck(ctx, id, deck any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeck", reflect.TypeOf((*MockDeckExecutor)(nil).UpdateDeck), ctx, id, deck)
}
